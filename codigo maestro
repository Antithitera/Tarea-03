#include <iostream>
#include <cmath>
using namespace std;

/*
EQUIPO V-03
ANGEL TABUENCA
CARLOS ASENSIO
MERCEDES ANDUEZA

DESCRIPCIÓN
*/

double fd, fcout, fsimul, theta0, omega0, alpha, thetaM, tau, k,td, tcout, tsimul; //NOTA: omega0 es la velocidad angular inicial, theta^punto_0.
double const epsilon=pow(10,-7);
char utheta, uomega;

void validaAngulo (double theta0, char utheta, bool &b, double &theta_0){//Devuelve theta0 en radianes -> USAR theta_0

}

void validaVelocidad (double theta0, char utheta, bool &b, double &omega_0){//Devuelve omega0 en radianes -> USAR omega_0

}

double fase (double s, double r, double &phi0){

return
}

double normaliza (double theta){

return
}

void analisis (double alpha, double theta0, double v0, double epsilon, double &thetaM, double &tau, int &k){

}

void rungekutta (double aplha, double &v, double &thetaT, double delta){

}
//Aquí tienen que estar también los cout cada tcout iteraciones y una función si la energía es menor que 2mgl.
int main(){
    cin>>fd>>fcout>>fsimul>>theta0>>utheta>>omega0>>uomega>>alpha;
    //Nos aseguremos de que theta y omega estén en radianes
    validaAngulo;
    validaVelocidad;
    //Mensaje de error si alguna unidad está mal, b==false viene de los subalgoritmos validaAngulo y validaVelocidad
    if (alpha<=0||fd<=0||fcout<=0||fsimul<=0||b==false) 
        cout << "HAY ALGÚN ERROR, ALPHA Y LOS FACTORES DEL PERIODO DEBEN SER POSITIVOS Y LAS UNIDADES DEL ÁNGULO Y LA VELOCIDAD DEBEN SER 'r' O 's'.";
        
    else {
        analisis(aplpha,theta_0,omega_0,epsilon,thetaM,tau,k);
        //Calculamos los tiempos representativos del péndulo gracias a la tau que calcula el subalgoritmo analisis
        td=fd*tau;
        tcout=fd*tau;
        tsimul=fsimul*tau;
        //Usamos RungeKutta para calcular theta y omega para sucesivos tiempos hasta t=tsimul

    }
return 0;
}
